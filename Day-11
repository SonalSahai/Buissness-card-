//server.js
const express = require('express');
const { MongoClient, ObjectId } = require('mongodb');

const app = express();
app.use(express.json());

const PORT = 3000;
const mongoUrl = "mongodb://localhost:27017";
const dbName = "projectData";
let db;

// Connect to MongoDB
async function connectToMongoDB() {
  try {
    const client = new MongoClient(mongoUrl);
    await client.connect();
    db = client.db(dbName);
    console.log("✅ Connected to MongoDB");
  } catch (err) {
    console.error("❌ MongoDB connection failed:", err);
    process.exit(1);
  }
}
connectToMongoDB();

// 🔹 CREATE project
app.post('/api/projects', async (req, res) => {
  const newProject = req.body;

  if (!newProject || !newProject.name) {
    return res.status(400).json({ error: "⚠️ Project name is required" });
  }

  try {
    const result = await db.collection('projects').insertOne(newProject);
    res.status(201).json({
      message: "✅ Project created successfully",
      id: result.insertedId
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "⚠️ Something went wrong" });
  }
});

// 🔹 UPDATE project by ID (PUT)
app.put('/api/projects/:id', async (req, res) => {
  const { id } = req.params;
  const newData = req.body;

  if (!ObjectId.isValid(id)) {
    return res.status(400).json({ error: "⚠️ Invalid ID format" });
  }
  if (!newData || Object.keys(newData).length === 0) {
    return res.status(400).json({ error: "⚠️ No data to update" });
  }

  try {
    const result = await db.collection('projects').updateOne(
      { _id: new ObjectId(id) },
      { $set: newData }
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ error: "❌ Project not found" });
    }

    res.status(204).send(); // ✅ No content response
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "⚠️ Something went wrong" });
  }
});

// 🔹 DELETE project by ID
app.delete('/api/projects/:id', async (req, res) => {
  const { id } = req.params;

  if (!ObjectId.isValid(id)) {
    return res.status(400).json({ error: "⚠️ Invalid ID format" });
  }

  try {
    const result = await db.collection('projects').deleteOne({ _id: new ObjectId(id) });

    if (result.deletedCount === 0) {
      return res.status(404).json({ error: "❌ Project not found" });
    }

    res.status(204).send(); // ✅ No content after delete
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "⚠️ Something went wrong" });
  }
});

// Start server
app.listen(PORT, () => console.log(`🚀 Server running at http://localhost:${PORT}`));

//requests.http
### Create a new project
POST http://localhost:3000/api/projects
Content-Type: application/json

{
  "name": "Test Project",
  "description": "Sample project for testing",
  "status": "In Progress"
}
### Update project
PUT http://localhost:3000/api/projects/68ce3f8e89e5f4e25b8cb4fa
Content-Type: application/json

{
  "status": "Completed"
}
### Delete project
DELETE http://localhost:3000/api/projects/68ce3f8e89e5f4e25b8cb4fa




