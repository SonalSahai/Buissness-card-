//server.js
const express = require("express");
const { MongoClient } = require("mongodb");
const path = require("path");

const app = express();
const PORT = 3000;

// MongoDB connection
const mongoUrl = "mongodb://localhost:27017";
const dbName = "resumeData";
let db;

// Middleware for parsing JSON
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));


function normalizeProject(doc) {
  return {
    _id: doc._id.toString(),
    title: doc.title,
    description: doc.description,
    technologies: doc.technologies || [],
    featured: !!doc.featured,
    createdAt: doc.createdAt ? new Date(doc.createdAt).toISOString() : null,
    updatedAt: doc.updatedAt ? new Date(doc.updatedAt).toISOString() : null,
  };
}

// POST /api/projects - Create new project
app.post("/api/projects", async (req, res) => {
  try {
    const projectData = req.body;
    console.log("üì• Incoming Project Data:", projectData);

    if (!projectData.title || !projectData.description) {
      return res.status(400).json({
        success: false,
        error: "Title and description are required",
      });
    }

    // defaults and timestamps
    projectData.technologies = projectData.technologies || [];
    projectData.featured = projectData.featured || false;
    projectData.createdAt = new Date();
    projectData.updatedAt = new Date();

    const result = await db.collection("projects").insertOne(projectData);
    console.log("‚úÖ Inserted into MongoDB:", result.insertedId.toString());

    // return data with _id as string
    res.status(201).json({
      success: true,
      message: "Project created successfully",
      data: normalizeProject({ _id: result.insertedId, ...projectData }),
    });
  } catch (error) {
    console.error("üî• Error inserting project:", error);
    res.status(500).json({
      success: false,
      error: "Failed to create project",
    });
  }
});

// GET /api/projects - Get all projects
app.get("/api/projects", async (req, res) => {
  try {
    const projects = await db.collection("projects").find({}).toArray();
    const normalized = projects.map(normalizeProject);

    res.json({
      success: true,
      count: normalized.length,
      data: normalized,
    });
  } catch (error) {
    console.error("üî• Error retrieving projects:", error);
    res.status(500).json({
      success: false,
      error: "Failed to retrieve projects",
    });
  }
});

// Connect to MongoDB and start server
MongoClient.connect(mongoUrl)
  .then((client) => {
    db = client.db(dbName);
    console.log("‚úÖ Connected to MongoDB");
    app.listen(PORT, () => {
      console.log(`üöÄ Server running on http://localhost:${PORT}/api/projects`);
    });
  })
  .catch((err) => console.error("‚ùå MongoDB Connection Error:", err));
